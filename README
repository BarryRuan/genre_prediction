EECS 595 Class Project

-----------------------------------------
USAGE:

(1). To run a single instance, use
    "python3 main.py [binary | frequency | tf-idf] [naive_bayes | logistic_regression | knn | svm ]"

(2). To run ALL combinations, execute the runner.sh file

NOTE: Not all combinations work properly. Use the runner.sh file to see which ones.


----------------------------------------
DEVELOPMENT:

After adding a new classifier, do the following:

(1). Make sure that your classifier code is contained in a function. Update main.py with the new classifier (check for TODO tags in main.py)

(2). Update the lists defined in runner.sh

(3). Update the usage part of this README


-----------------------------------------
DEVELOPMENT: 

To get feature maps, use the following codes:

  (1). for binary features:

      from data.features import LyricsDataSet
      lyricsData = LyricsDataSet('binary')

  (2). for term frequency: 

      from data.features import LyricsDataSet
      lyricsData = LyricsDataSet('frequency')

  (3). for tf-idf:

      from data.features import LyricsDataSet
      lyricsData = LyricsDataSet('tf-idf')

  To get train and test splits, use the following codes:

    train_x = lyricsData.get_train_x()
    train_y = lyricsData.get_train_y()
    test_x = lyricsData.get_test_x()
    test_y = lyricsData.get_test_y()

  Note that train_x and test_x are lists of scipy.sparse_matrix, to 
  convert it to np.array(), you can use train_x[i].toarray()

------------------
|db_processing.py|
------------------
This file is used to transform the original dataset mxm_dataset.db to
several .txt files including data/frequency_features.txt, 
data/vocabulary.txt, data/genreList.txt. The new files are much smaller
to the original file (<60MB vs. 2.6GB) so that time consumed on reading
train and test split could be greatly reduced from (10 min to 20s).
If you downloaded the data/ directory, there is no need to run this code.
